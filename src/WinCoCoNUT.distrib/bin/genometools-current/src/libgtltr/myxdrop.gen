/*
  Copyright (c) 2007 David Ellinghaus <d.ellinghaus@ikmb.uni-kiel.de>
  Copyright (c) 2007 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

EVALXDROPARBITSCORES
{
  int integermax, integermin, i ,     /* index i */
    j = 0,                            /* index j */
    k = 0,                            /* diagonal */
    end_k = ulen - vlen,              /* diagonal of endpoint (ulen, vlen) */
    lbound = 0,                       /* diagonal lower bound */
    ubound = 0,                       /* diagonal upper bound */
    lboundtmp = 0,
    uboundtmp = 0,
    tmprow;                           /* temporary row index */
  Uchar a, b;
  Myfrontvalue tmpfront;
  Arbitrarydistances arbitdistances;
  int d = 0,                         /* distance */
      d_pre = 0,                     /* distance previous */
      dback;
  Xdropscore bigt_tmp;               /* best score T' seen already */
  ArrayXdropscore big_t;             /* array T[d] of best score T for each d */
  bool alwaysMININFINITYINT = true;
  int allowedMININFINITYINTgenerations = 0,
      currentMININFINITYINTgeneration = 0;

  error_check(err);

  calculatedistancesfromscores(arbitscores, &arbitdistances);
  calculateallowedMININFINITYINTgenerations(
     &allowedMININFINITYINTgenerations,
     &arbitdistances);

  dback = SETDBACK(xdropbelowscore);

  INITARRAY (&big_t, Xdropscore);
  integermax = MAX (ulen, vlen);
  integermin = -integermax;

  /* "phase" 0 */
  for (i = 0; i < MIN(ulen,vlen); i++)
  {
    COMPARESYMBOLSSEP(i,i);
  }

  /* alignment already finished */
  if (i >= ulen || i >= vlen )
  {
    lbound =  1;
    ubound = -1;
  }

  tmpfront.dptabrow = i;
  tmpfront.dptabdirection = (Uchar) 0;   /* no predecessor */

  STOREINARRAYFRONTS (fronts, 0, Myfrontvalue, tmpfront);
  xdropbest->score = bigt_tmp = S (i + i, 0);
  xdropbest->ivalue = xdropbest->jvalue = (unsigned int) i;

  /*@ignore@*/
  STOREINARRAY (&big_t, Xdropscore, 10, bigt_tmp);
  /*@end@*/

  /* "phase" d > 0 */
  while (lbound <= ubound)
  {
    d++;
    d_pre = d - dback;

    /* calculate fronts */
    for (k = lbound - 1; k <= ubound + 1; k++)
    {

      i = MINUSINFINITYINT;
      /* case 1 : DELETION-EDGE  */
      if ( (lbound < k) &&
           (d - arbitdistances.del >= 0) &&
           (( -(d - arbitdistances.del) <= k - 1) &&
            (k - 1 <= d - arbitdistances.del)))
      {
        i =
          fronts->spaceMyfrontvalue[ACCESSTOFRONT(d - arbitdistances.del,
                                                  k - 1)].dptabrow + 1;
        tmpfront.dptabdirection = MYDELETIONBIT;
      }
      /* case 2: REPLACEMENT-EDGE */
      if ((lbound <= k) && (k <= ubound) && (d - arbitdistances.mis >= 0) &&
          (( -(d - arbitdistances.mis) <= k) && (k <= d - arbitdistances.mis)))
      {
        /* test, if case 1 has happened. */
        if (tmpfront.dptabdirection & MYDELETIONBIT)
        {
          tmprow =
            fronts->spaceMyfrontvalue[ACCESSTOFRONT(d - arbitdistances.mis,
                                                    k)].dptabrow + 1;
          if (tmprow > i)
          {
            i = tmprow;
            tmpfront.dptabdirection = MYREPLACEMENTBIT;
          }
        }
        else
        {
          i =
            fronts->spaceMyfrontvalue[ACCESSTOFRONT(d - arbitdistances.mis, k)]
            .dptabrow + 1;
          tmpfront.dptabdirection = MYREPLACEMENTBIT;
        }

      }
      /* case 3: INSERTION-EDGE */
      if ((k < ubound) && (d - arbitdistances.ins >= 0) &&
          (( -(d - arbitdistances.ins) <= k + 1) &&
           (k + 1 <= d - arbitdistances.ins)))
      {
        if ((tmpfront.dptabdirection & MYDELETIONBIT)
            || (tmpfront.dptabdirection & MYREPLACEMENTBIT))
        {
          tmprow =
            fronts->spaceMyfrontvalue[ACCESSTOFRONT (d - arbitdistances.ins,
                                                     k + 1)].dptabrow;
          if (tmprow > i)
          {
            i = tmprow;
            tmpfront.dptabdirection = MYINSERTIONBIT;
          }
        }
        else
        {
          i =
            fronts->spaceMyfrontvalue[ACCESSTOFRONT (d - arbitdistances.ins,
                                                     k + 1)].dptabrow;
          tmpfront.dptabdirection = MYINSERTIONBIT;
        }
      }

      j = i - k;

      /* if i = MINUSINFINITYINY or MINUSINFINITYINY + 1 */
      if (i < 0)
      {
        if (tmpfront.dptabdirection == (Uchar) 0)
        {
          alwaysMININFINITYINT = false;
        }
        tmpfront.dptabrow = MINUSINFINITYINT;
      }
      /* alignment score smaller than T - X */
      else if ( d_pre > 0 &&
              big_t.spaceXdropscore != NULL &&
              (S (i + j, d) < big_t.spaceXdropscore[d_pre] - xdropbelowscore)
             )
      {
        tmpfront.dptabrow = MINUSINFINITYINT;
      }
      else if (( k <= -d || k >= d ) || /* not correct boundaries for
                                           ACCESTOFRONT(d-1,k) */
               ((fronts->spaceMyfrontvalue[ACCESSTOFRONT(d-1, k)].dptabrow < i)
                 && (i <= MIN(ulen,vlen + k))))
      {
        while (i < ulen && j < vlen)
        {
          COMPARESYMBOLSSEP(i,j);
          i++;
          j++;
        }

        alwaysMININFINITYINT = false;
        tmpfront.dptabrow = i;

        /* MAX(bigt_tmp, S(i+j,d)); */
        if (S (i + j, d) > bigt_tmp)
        {
          xdropbest->score = bigt_tmp = S (i + j, d);
          xdropbest->ivalue = (unsigned int) i;
          xdropbest->jvalue = (unsigned int) j;
        }
      }

      else
      {
        alwaysMININFINITYINT = false;
        tmpfront.dptabrow =
          fronts->spaceMyfrontvalue[ACCESSTOFRONT(d - 1, k)].dptabrow;
      }

      STOREINARRAYFRONTS (fronts, ACCESSTOFRONT (d, k), Myfrontvalue,
                            tmpfront);

      /* delete value for test for */
      /* INSERTIONBIT/REPLACEMENTBIT/DELETIONBIT above
      tmpfront.dptabdirection = (Uchar) 0; */

    }   /* end for loop */

    /* if all front values are MINUSINFINITYINT,
       aligment prematurely finished if allowedMININFINITYINTgenerations
       exceeded
       (full front has already ended at d - currentMININFINITYINTgeneration). */
    if (alwaysMININFINITYINT)
    {
      currentMININFINITYINTgeneration++;
      if (currentMININFINITYINTgeneration > allowedMININFINITYINTgenerations)
      {
        d = d - currentMININFINITYINTgeneration;
        break;
      }
    }
    else
    {
      currentMININFINITYINTgeneration = 0;
      alwaysMININFINITYINT = true;
    }
    /*@ignore@*/
    STOREINARRAY (&big_t, Xdropscore, 10, bigt_tmp);
    /*@end@*/

    /* fill out of bounds values of MINUSINFINITYINT
       needed for showmatrix function */
    for (k = -d; k < lbound - 1; k++)
    {
      tmpfront.dptabrow = MINUSINFINITYINT;
      STOREINARRAYFRONTS (fronts, ACCESSTOFRONT (d, k), Myfrontvalue,
                          tmpfront);
    }
    for (k = ubound + 2; k <= d; k++)
    {
      tmpfront.dptabrow = MINUSINFINITYINT;
      STOREINARRAYFRONTS (fronts, ACCESSTOFRONT (d, k), Myfrontvalue,
                          tmpfront);
    }

    /* alignment finished */
    if ((-d <= end_k && end_k <= d) &&
        fronts->spaceMyfrontvalue[ACCESSTOFRONT (d, end_k)].dptabrow == ulen)
    {
      break;
    }

    /* pruning lower bound
       lbound may decrease by one or increase/stays the same */
    for (k = lbound - 1; k <= ubound + 1; k++)
    {
      if (fronts->spaceMyfrontvalue[ACCESSTOFRONT (d, k)].dptabrow >
          MINUSINFINITYINT)
      {
        lbound = k;
        break;
      }
    }

    /* pruning upper bound
       ubound may increase by one or decrease/stays the same */
    for (k = ubound + 1; k >= lbound - 1; k--)
    {
      if (fronts->spaceMyfrontvalue[ACCESSTOFRONT (d, k)].dptabrow >
          MINUSINFINITYINT)
      {
        ubound = k;
        break;
      }
    }

    /* handling boundaries lower bound */
    lboundtmp = lbound;
    for (k = 0; k >= lbound; k--)
    {
      if (fronts->spaceMyfrontvalue[ACCESSTOFRONT (d, k)].dptabrow == vlen + k)
      {
        /* debugging 12.11.06, vorher:
           lboundtmp = k + 2; bei Zhang so */
        lboundtmp = k;
        break;
      }
    }

    /* handling boundaries upper bound */
    uboundtmp = ubound;
    for (k = 0; k <= ubound; k++)
    {
      if (fronts->spaceMyfrontvalue[ACCESSTOFRONT (d, k)].dptabrow == ulen)
      {
        /* debugging 12.11.06, vorher:
           uboundtmp = k - 2; bei Zhang so */
        uboundtmp = k;
        break;
      }
    }

    lbound = MAX (lbound, lboundtmp);
    ubound = MIN (ubound, uboundtmp);
  }

  FREEARRAY (&big_t, Xdropscore);
}
